# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `phlex` gem.
# Please instead update this file by running `bin/tapioca gem phlex`.


class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://phlex//lib/phlex.rb#68
  def ðŸ’ª; end
end

# source://phlex//lib/phlex.rb#7
module Phlex
  class << self
    # source://phlex//lib/phlex.rb#28
    def __expand_attribute_cache__(file_path); end

    # Generate an HTML string using Phlexâ€™ HTML DSL
    #
    # source://phlex//lib/phlex.rb#36
    def html(&block); end

    # Generate an SVG string using Phlexâ€™ SVG DSL
    #
    # source://phlex//lib/phlex.rb#52
    def svg(&block); end
  end
end

# source://phlex//lib/phlex.rb#26
Phlex::ATTRIBUTE_CACHE = T.let(T.unsafe(nil), Phlex::FIFO)

# source://phlex//lib/phlex/errors/argument_error.rb#3
class Phlex::ArgumentError < ::ArgumentError
  include ::Phlex::Error
end

# source://phlex//lib/phlex.rb#25
Phlex::CACHED_FILES = T.let(T.unsafe(nil), Set)

# source://phlex//lib/phlex/csv.rb#3
class Phlex::CSV
  # @return [CSV] a new instance of CSV
  #
  # source://phlex//lib/phlex/csv.rb#12
  def initialize(collection); end

  # source://phlex//lib/phlex/csv.rb#125
  def around_row(*_arg0, **_arg1, &_arg2); end

  # source://phlex//lib/phlex/csv.rb#21
  def call(buffer = T.unsafe(nil), context: T.unsafe(nil), delimiter: T.unsafe(nil)); end

  # Returns the value of attribute collection.
  #
  # source://phlex//lib/phlex/csv.rb#19
  def collection; end

  # source://phlex//lib/phlex/csv.rb#134
  def content_type; end

  # source://phlex//lib/phlex/csv.rb#138
  def delimiter; end

  # source://phlex//lib/phlex/csv.rb#130
  def filename; end

  private

  # source://phlex//lib/phlex/csv.rb#167
  def __escape__(buffer, value, escape_csv_injection:, strip_whitespace:, escape_regex:); end

  # source://phlex//lib/phlex/csv.rb#144
  def column(header = T.unsafe(nil), value); end

  # source://phlex//lib/phlex/csv.rb#148
  def each_item(&_arg0); end

  # source://phlex//lib/phlex/csv.rb#236
  def ensure_escape_csv_injection_configured!; end

  # Override and set to `false` to disable CSV injection escapes or `true` to enable.
  #
  # @return [Boolean]
  #
  # source://phlex//lib/phlex/csv.rb#163
  def escape_csv_injection?; end

  # Handle legacy `view_template` method
  #
  # source://phlex//lib/phlex/csv.rb#226
  def method_missing(method_name, *_arg1, **_arg2, &_arg3); end

  # Override and set to `false` to disable rendering headers.
  #
  # @return [Boolean]
  #
  # source://phlex//lib/phlex/csv.rb#153
  def render_headers?; end

  # Handle legacy `view_template` method
  #
  # @return [Boolean]
  #
  # source://phlex//lib/phlex/csv.rb#221
  def respond_to_missing?(method_name, include_private); end

  # Override and set to `true` to strip leading and trailing whitespace from values.
  #
  # @return [Boolean]
  #
  # source://phlex//lib/phlex/csv.rb#158
  def trim_whitespace?; end
end

# source://phlex//lib/phlex/csv.rb#4
Phlex::CSV::FORMULA_PREFIXES_MAP = T.let(T.unsafe(nil), Array)

# source://phlex//lib/phlex/csv.rb#10
Phlex::CSV::UNDEFINED = T.let(T.unsafe(nil), Object)

# source://phlex//lib/phlex.rb#24
Phlex::DEPLOYED_AT = T.let(T.unsafe(nil), Integer)

# source://phlex//lib/phlex/errors/double_render_error.rb#3
class Phlex::DoubleRenderError < ::RuntimeError
  include ::Phlex::Error
end

# @api private
#
# source://phlex//lib/phlex/error.rb#4
module Phlex::Error; end

# source://phlex//lib/phlex.rb#22
Phlex::Escape = ERB::Escape

# @api private
#
# source://phlex//lib/phlex/fifo.rb#4
class Phlex::FIFO
  # @api private
  # @return [FIFO] a new instance of FIFO
  #
  # source://phlex//lib/phlex/fifo.rb#5
  def initialize(max_bytesize: T.unsafe(nil), max_value_bytesize: T.unsafe(nil)); end

  # @api private
  #
  # source://phlex//lib/phlex/fifo.rb#21
  def [](key); end

  # @api private
  #
  # source://phlex//lib/phlex/fifo.rb#26
  def []=(key, value); end

  # @api private
  #
  # source://phlex//lib/phlex/fifo.rb#13
  def bytesize; end

  # @api private
  #
  # source://phlex//lib/phlex/fifo.rb#49
  def clear; end

  # @api private
  #
  # source://phlex//lib/phlex/fifo.rb#15
  def expand(bytes); end

  # @api private
  #
  # source://phlex//lib/phlex/fifo.rb#13
  def max_bytesize; end

  # @api private
  #
  # source://phlex//lib/phlex/fifo.rb#45
  def size; end
end

# An extremely fast in-memory cache store that evicts keys on a first-in-first-out basis.
#
# source://phlex//lib/phlex/fifo_cache_store.rb#4
class Phlex::FIFOCacheStore
  # @return [FIFOCacheStore] a new instance of FIFOCacheStore
  #
  # source://phlex//lib/phlex/fifo_cache_store.rb#5
  def initialize(max_bytesize: T.unsafe(nil)); end

  # source://phlex//lib/phlex/fifo_cache_store.rb#27
  def clear; end

  # source://phlex//lib/phlex/fifo_cache_store.rb#12
  def fetch(key); end

  private

  # source://phlex//lib/phlex/fifo_cache_store.rb#33
  def map_key(value); end
end

# source://phlex//lib/phlex/html.rb#3
class Phlex::HTML < ::Phlex::SGML
  include ::Phlex::HTML::StandardElements
  include ::Phlex::HTML::VoidElements
  extend ::Phlex::SGML::Elements

  # Returns the string "text/html"
  #
  # source://phlex//lib/phlex/html.rb#34
  def content_type; end

  # Output an HTML doctype.
  #
  # source://phlex//lib/phlex/html.rb#8
  def doctype; end

  # Override to provide a filename for the HTML file
  #
  # source://phlex//lib/phlex/html.rb#29
  def filename; end

  # Outputs an `<svg>` tag.
  #
  # [MDN Docs](https://developer.mozilla.org/docs/Web/SVG/Element/svg)
  # [Spec](https://html.spec.whatwg.org/#the-svg-element)
  #
  # source://phlex//lib/phlex/html.rb#20
  def svg(*_arg0, **_arg1, &_arg2); end

  # Output an HTML tag dynamically, e.g:
  #
  # ```ruby
  # tag(@tag_name, class: "title")
  # ```
  #
  # source://phlex//lib/phlex/html.rb#44
  def tag(name, **attributes, &_arg2); end
end

# Standard HTML elements accept content and always have a closing tag.
#
# source://phlex//lib/phlex/html/standard_elements.rb#4
module Phlex::HTML::StandardElements
  extend ::Phlex::SGML::Elements

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def a(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def abbr(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def address(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def article(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def aside(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def audio(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def b(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def bdi(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def bdo(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def blockquote(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def body(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def button(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def canvas(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def caption(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def cite(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def code(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def colgroup(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def data(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def datalist(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def dd(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def del(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def details(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def dfn(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def dialog(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def div(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def dl(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def dt(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def em(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def fencedframe(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def fieldset(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def figcaption(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def figure(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def footer(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def form(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def h1(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def h2(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def h3(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def h4(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def h5(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def h6(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def head(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def header(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def hgroup(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def html(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def i(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def iframe(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def ins(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def kbd(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def label(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def legend(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def li(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def main(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def map(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def mark(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def menu(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def meter(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def nav(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def noscript(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def object(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def ol(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def optgroup(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def option(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def output(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def p(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def picture(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def pre(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def progress(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def q(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def rp(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def rt(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def ruby(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def s(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def samp(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def script(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def search(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def section(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def select(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def selectedcontent(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def slot(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def small(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def span(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def strong(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def style(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def sub(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def summary(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def sup(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def svg(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def table(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def tbody(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def td(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def template(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def textarea(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def tfoot(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def th(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def thead(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def time(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def title(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def tr(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def u(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def ul(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def var(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def video(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def wbr(**attributes); end
end

# Void HTML elements don't accept content and never have a closing tag.
#
# source://phlex//lib/phlex/html/void_elements.rb#4
module Phlex::HTML::VoidElements
  extend ::Phlex::SGML::Elements

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def area(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def base(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def br(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def col(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def embed(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def hr(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def img(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def input(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def link(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def meta(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def source(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#107
  def track(**attributes); end
end

# @api private
#
# source://phlex//lib/phlex/helpers.rb#4
module Phlex::Helpers
  private

  # @api private
  #
  # source://phlex//lib/phlex/helpers.rb#46
  def grab(**bindings); end

  # @api private
  #
  # source://phlex//lib/phlex/helpers.rb#7
  def mix(*args); end
end

# source://phlex//lib/phlex/kit.rb#3
module Phlex::Kit
  # source://phlex//lib/phlex/kit.rb#47
  def const_added(name); end

  # source://phlex//lib/phlex/kit.rb#35
  def method_missing(name, *_arg1, **_arg2, &_arg3); end

  private

  # @return [Boolean]
  #
  # source://phlex//lib/phlex/kit.rb#43
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://phlex//lib/phlex/kit.rb#22
    def extended(mod); end
  end
end

# source://phlex//lib/phlex/kit.rb#4
module Phlex::Kit::LazyLoader
  # source://phlex//lib/phlex/kit.rb#5
  def method_missing(name, *_arg1, **_arg2, &_arg3); end

  private

  # @return [Boolean]
  #
  # source://phlex//lib/phlex/kit.rb#15
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://phlex//lib/phlex.rb#8
Phlex::Loader = T.let(T.unsafe(nil), Zeitwerk::GemLoader)

# source://phlex//lib/phlex/errors/name_error.rb#3
class Phlex::NameError < ::NameError
  include ::Phlex::Error
end

# source://phlex//lib/phlex/errors/runtime_error.rb#3
class Phlex::RuntimeError < ::RuntimeError
  include ::Phlex::Error
end

# **Standard Generalized Markup Language** for behaviour common to {HTML} and {SVG}.
#
# source://phlex//lib/phlex/sgml.rb#4
class Phlex::SGML
  include ::Phlex::Helpers

  # Cache a block of content.
  #
  # ```ruby
  # end
  # ```
  #
  # source://phlex//lib/phlex/sgml.rb#283
  def cache(*cache_key, **_arg1, &content); end

  # source://phlex//lib/phlex/sgml.rb#86
  def call(buffer = T.unsafe(nil), context: T.unsafe(nil), fragments: T.unsafe(nil), &_arg3); end

  # Capture the output of the block and returns it as a string.
  #
  # source://phlex//lib/phlex/sgml.rb#211
  def capture(*args, &block); end

  # Wrap the output in an HTML comment.
  #
  # [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Comments)
  #
  # source://phlex//lib/phlex/sgml.rb#181
  def comment(&_arg0); end

  # source://phlex//lib/phlex/sgml.rb#136
  def context; end

  # Flush the current state to the output buffer.
  #
  # source://phlex//lib/phlex/sgml.rb#243
  def flush; end

  # Define a named fragment that can be selectively rendered.
  #
  # source://phlex//lib/phlex/sgml.rb#222
  def fragment(name); end

  # source://phlex//lib/phlex/sgml.rb#98
  def internal_call(parent: T.unsafe(nil), state: T.unsafe(nil), &block); end

  # source://phlex//lib/phlex/sgml.rb#335
  def json_escape(string); end

  # Cache a block of content where you control the entire cache key.
  # If you really know what youâ€™re doing and want to take full control
  # and responsibility for the cache key, use this method.
  #
  # ```ruby
  # low_level_cache([Commonmarker::VERSION, Digest::MD5.hexdigest(@content)]) do
  #   markdown(@content)
  # end
  # ```
  #
  # Note: To allow you more control, this method does not take a splat of cache keys.
  # If you need to pass multiple cache keys, you should pass an array.
  #
  # source://phlex//lib/phlex/sgml.rb#312
  def low_level_cache(cache_key, **options, &content); end

  # Output plain text.
  #
  # source://phlex//lib/phlex/sgml.rb#153
  def plain(content); end

  # Output the given safe object as-is. You may need to use `safe` to mark a string as a safe object.
  #
  # source://phlex//lib/phlex/sgml.rb#195
  def raw(content); end

  # source://phlex//lib/phlex/sgml.rb#247
  def render(renderable = T.unsafe(nil), &_arg1); end

  # Returns `false` before rendering and `true` once the component has started rendering.
  # It will not reset back to false after rendering.
  #
  # @return [Boolean]
  #
  # source://phlex//lib/phlex/sgml.rb#148
  def rendering?; end

  # Mark the given string as safe for HTML output.
  #
  # source://phlex//lib/phlex/sgml.rb#231
  def safe(value); end

  # source://phlex//lib/phlex/sgml.rb#82
  def to_proc; end

  # source://phlex//lib/phlex/sgml.rb#74
  def view_template; end

  # Output a single space character. If a block is given, a space will be output before and after the block.
  #
  # source://phlex//lib/phlex/sgml.rb#162
  def whitespace(&_arg0); end

  # Mark the given string as safe for HTML output.
  #
  # source://phlex//lib/phlex/sgml.rb#231
  def ðŸ¦º(value); end

  private

  # source://phlex//lib/phlex/sgml.rb#467
  def __attributes__(attributes, buffer = T.unsafe(nil)); end

  # source://phlex//lib/phlex/sgml.rb#420
  def __implicit_output__(content); end

  # Provides the nested-attributes case for serializing out attributes.
  # This allows us to skip many of the checks the `__attributes__` method must perform.
  #
  # source://phlex//lib/phlex/sgml.rb#560
  def __nested_attributes__(attributes, base_name, buffer = T.unsafe(nil)); end

  # source://phlex//lib/phlex/sgml.rb#609
  def __nested_tokens__(tokens); end

  # Result is **unsafe**, so it should be escaped!
  #
  # source://phlex//lib/phlex/sgml.rb#657
  def __styles__(styles); end

  # same as __implicit_output__ but escapes even `safe` objects
  #
  # source://phlex//lib/phlex/sgml.rb#445
  def __text__(content); end

  # source://phlex//lib/phlex/sgml.rb#384
  def __yield_content__; end

  # source://phlex//lib/phlex/sgml.rb#408
  def __yield_content_with_args__(*a); end

  # source://phlex//lib/phlex/sgml.rb#396
  def __yield_content_with_no_yield_args__; end

  # source://phlex//lib/phlex/sgml.rb#380
  def after_template; end

  # Override this method to use a different deployment key.
  #
  # source://phlex//lib/phlex/sgml.rb#342
  def app_version_key; end

  # source://phlex//lib/phlex/sgml.rb#371
  def around_template; end

  # source://phlex//lib/phlex/sgml.rb#376
  def before_template; end

  # Override this method to use a different cache store.
  #
  # source://phlex//lib/phlex/sgml.rb#347
  def cache_store; end

  # @return [Boolean]
  #
  # source://phlex//lib/phlex/sgml.rb#351
  def enable_cache_reloading?; end

  # source://phlex//lib/phlex/sgml.rb#364
  def format_object(object); end

  # @return [Boolean]
  #
  # source://phlex//lib/phlex/sgml.rb#360
  def render?; end

  # source://phlex//lib/phlex/sgml.rb#355
  def vanish(*_arg0, **_arg1, &_arg2); end

  class << self
    # Render the view to a String. Arguments are delegated to {.new}.
    #
    # source://phlex//lib/phlex/sgml.rb#23
    def call(*_arg0, **_arg1, &_arg2); end

    # source://phlex//lib/phlex/sgml.rb#39
    def erb(method_name, erb = T.unsafe(nil), locals: T.unsafe(nil), &block); end

    # Create a new instance of the component.
    #
    # @note The block will not be delegated {#initialize}. Instead, it will be sent to {#template} when rendering.
    #
    # source://phlex//lib/phlex/sgml.rb#29
    def new(*a, **k, &block); end

    private

    # @private
    #
    # source://phlex//lib/phlex/sgml.rb#720
    def method_added(method_name); end
  end
end

# source://phlex//lib/phlex/sgml.rb#8
Phlex::SGML::ERBCompiler = T.let(T.unsafe(nil), ERB::Compiler)

# source://phlex//lib/phlex/sgml/elements.rb#3
module Phlex::SGML::Elements
  # source://phlex//lib/phlex/sgml/elements.rb#103
  def __register_void_element__(method_name, tag: T.unsafe(nil)); end

  # source://phlex//lib/phlex/sgml/elements.rb#4
  def __registered_elements__; end

  # source://phlex//lib/phlex/sgml/elements.rb#8
  def register_element(method_name, tag: T.unsafe(nil)); end
end

# source://phlex//lib/phlex/sgml.rb#6
Phlex::SGML::REF_ATTRIBUTES = T.let(T.unsafe(nil), Set)

# @api private
#
# source://phlex//lib/phlex/sgml/safe_object.rb#4
module Phlex::SGML::SafeObject; end

# source://phlex//lib/phlex/sgml/safe_value.rb#3
class Phlex::SGML::SafeValue
  include ::Phlex::SGML::SafeObject

  # @return [SafeValue] a new instance of SafeValue
  #
  # source://phlex//lib/phlex/sgml/safe_value.rb#6
  def initialize(to_s); end

  # Returns the value of attribute to_s.
  #
  # source://phlex//lib/phlex/sgml/safe_value.rb#10
  def to_s; end
end

# source://phlex//lib/phlex/sgml/state.rb#3
class Phlex::SGML::State
  # @return [State] a new instance of State
  #
  # source://phlex//lib/phlex/sgml/state.rb#4
  def initialize(output_buffer:, fragments:, user_context: T.unsafe(nil)); end

  # source://phlex//lib/phlex/sgml/state.rb#19
  def around_render(component); end

  # source://phlex//lib/phlex/sgml/state.rb#36
  def begin_fragment(id); end

  # Returns the value of attribute buffer.
  #
  # source://phlex//lib/phlex/sgml/state.rb#17
  def buffer; end

  # source://phlex//lib/phlex/sgml/state.rb#78
  def caching(&_arg0); end

  # @return [Boolean]
  #
  # source://phlex//lib/phlex/sgml/state.rb#90
  def caching?; end

  # source://phlex//lib/phlex/sgml/state.rb#94
  def capture; end

  # Returns the value of attribute capturing.
  #
  # source://phlex//lib/phlex/sgml/state.rb#15
  def capturing; end

  # Sets the attribute capturing
  #
  # @param value the value to set the attribute capturing to.
  #
  # source://phlex//lib/phlex/sgml/state.rb#15
  def capturing=(_arg0); end

  # source://phlex//lib/phlex/sgml/state.rb#53
  def end_fragment(id); end

  # source://phlex//lib/phlex/sgml/state.rb#114
  def flush; end

  # Returns the value of attribute fragment_depth.
  #
  # source://phlex//lib/phlex/sgml/state.rb#17
  def fragment_depth; end

  # Returns the value of attribute fragments.
  #
  # source://phlex//lib/phlex/sgml/state.rb#17
  def fragments; end

  # Returns the value of attribute output_buffer.
  #
  # source://phlex//lib/phlex/sgml/state.rb#17
  def output_buffer; end

  # source://phlex//lib/phlex/sgml/state.rb#69
  def record_fragment(id, offset, length, nested_fragments); end

  # @return [Boolean]
  #
  # source://phlex//lib/phlex/sgml/state.rb#32
  def should_render?; end

  # Returns the value of attribute user_context.
  #
  # source://phlex//lib/phlex/sgml/state.rb#15
  def user_context; end

  # Sets the attribute user_context
  #
  # @param value the value to set the attribute user_context to.
  #
  # source://phlex//lib/phlex/sgml/state.rb#15
  def user_context=(_arg0); end
end

# source://phlex//lib/phlex/sgml.rb#5
Phlex::SGML::UNSAFE_ATTRIBUTES = T.let(T.unsafe(nil), Set)

# source://phlex//lib/phlex/svg.rb#3
class Phlex::SVG < ::Phlex::SGML
  include ::Phlex::SVG::StandardElements

  # source://phlex//lib/phlex/svg.rb#16
  def cdata(content = T.unsafe(nil), &block); end

  # Returns the string "image/svg+xml"
  #
  # source://phlex//lib/phlex/svg.rb#7
  def content_type; end

  # Override to provide a filename for the SVG file
  #
  # source://phlex//lib/phlex/svg.rb#12
  def filename; end

  # source://phlex//lib/phlex/svg.rb#30
  def tag(name, **attributes, &_arg2); end
end

# source://phlex//lib/phlex/svg/standard_elements.rb#3
module Phlex::SVG::StandardElements
  extend ::Phlex::SGML::Elements

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def a(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def animate(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def animateMotion(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def animateTransform(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def circle(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def clipPath(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def defs(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def desc(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def discard(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def ellipse(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feBlend(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feColorMatrix(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feComponentTransfer(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feComposite(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feConvolveMatrix(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feDiffuseLighting(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feDisplacementMap(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feDistantLight(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feDropShadow(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feFlood(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feFuncA(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feFuncB(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feFuncG(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feFuncR(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feGaussianBlur(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feImage(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feMerge(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feMergeNode(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feMorphology(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feOffset(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def fePointLight(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feSpecularLighting(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feSpotLight(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feTile(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def feTurbulence(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def filter(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def foreignObject(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def g(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def image(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def line(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def linearGradient(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def marker(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def mask(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def metadata(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def mpath(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def path(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def pattern(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def polygon(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def polyline(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def radialGradient(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def rect(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def script(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def set(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def stop(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def style(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def svg(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def switch(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def symbol(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def text(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def textPath(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def title(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def tspan(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def use(**attributes); end

  # source://phlex//lib/phlex/sgml/elements.rb#12
  def view(**attributes); end
end

# source://phlex//lib/phlex/version.rb#4
Phlex::VERSION = T.let(T.unsafe(nil), String)
